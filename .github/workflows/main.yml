# name: Deploy to GitHub Pages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#     # Review gh actions docs if you want to further define triggers, paths, etc
#     # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on

# permissions:
#   contents: write

# jobs:
#   deploy:
#     name: Deploy to GitHub Pages
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - name: Check for package-lock.json
#         run: ls -la ./microsite
#       - name: Install dependencies
#         run: npm ci
#         working-directory: ./microsite
#       - name: Build website
#         run: npm run build
#         working-directory: ./microsite
#       # Popular action to deploy to GitHub Pages:
#       # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus
#       - name: Deploy to GitHub Pages
#         uses: peaceiris/actions-gh-pages@v3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           # Build output to publish to the `gh-pages` branch:
#           publish_dir: ./microsite/build
#           # The following lines assign commit authorship to the official
#           # GH-Actions bot for deploys to `gh-pages` branch:
#           # https://github.com/actions/checkout/issues/13#issuecomment-724415212
#           # The GH actions bot is used by default if you didn't specify the two fields.
#           # You can swap them out with your own user credentials.
#           user_name: github-actions[bot]
#           user_email: 41898282+github-actions[bot]@users.noreply.github.com
name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Debug repository structure after checkout
      - name: Check repository structure
        run: ls -la

      # Step 3: Check microsite directory for package-lock.json
      - name: Check microsite directory for package-lock.json
        run: ls -la ./microsite

      # Step 4: Setup Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # Step 5: Confirm microsite directory before running npm ci
      - name: Confirm microsite directory before npm ci
        run: ls -la ./microsite

      # Step 6: Clear npm cache before installing dependencies
      - name: Clear npm cache
        run: npm cache clean --force

      # Step 7: Install dependencies
      - name: Install dependencies
        run: npm ci
        working-directory: ./microsite


      # Step 7: Build website
      - name: Build website
        run: npm run build
        working-directory: ./microsite

      # Step 8: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./microsite/build
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
