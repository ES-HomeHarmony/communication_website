"use strict";(self.webpackChunkmicrosite=self.webpackChunkmicrosite||[]).push([[549],{7745:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(4848),o=n(8453);const s={},r="Definition of Done",a={id:"agile/DoD",title:"Definition of Done",description:"What is it",source:"@site/docs/agile/DoD.md",sourceDirName:"agile",slug:"/agile/DoD",permalink:"/communication_website/docs/agile/DoD",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Agile",permalink:"/communication_website/docs/category/agile"},next:{title:"Definition of Ready",permalink:"/communication_website/docs/agile/DoR"}},c={},d=[{value:"What is it",id:"what-is-it",level:2},{value:"Our DoD for this project",id:"our-dod-for-this-project",level:2}];function l(e){const t={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"definition-of-done",children:"Definition of Done"})}),"\n",(0,i.jsx)(t.h2,{id:"what-is-it",children:"What is it"}),"\n",(0,i.jsx)(t.p,{children:"The Definition of Done (DoD) is a set of criteria that an increment must meet so the team consider it complete and ready for release. It is important to have a clear DoD agreed on by the entire team to ensure that every increment released is delivering value and meeting the expectations."}),"\n",(0,i.jsx)(t.h2,{id:"our-dod-for-this-project",children:"Our DoD for this project"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Functionality developed"}),": The functionality has been fully developed and covers all specified requirements."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Code reviewed"}),": Code reviewed by one team member. The review comment should only include a little message about the code quality and the code should be approved by the reviewer. If needed, the comment should include improvements to be made."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Code coverage above 70% (backend)"}),": Backend code achieves at least 70% coverage with unit tests. The frontend passed Quality Gate, meeting reliability standards with zero duplications and no reported security hotspots."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tests written and passed"}),": All unit and frontend tests have been written and pass the quality gate."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Acceptance criteria met"}),": All specified acceptance criteria for the feature have been successfully met."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No critical bugs"}),": No unresolved critical bugs remain, defined as any issues causing crashes, data loss, severe security vulnerabilities, or functionality that blocks core features."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Documentation updated"}),": User and developer documentation has been updated to reflect the changes."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);